var searchIndex = JSON.parse('{\
"bytes":{"doc":"Provides abstractions for working with bytes.","i":[[3,"Bytes","bytes","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"IntoIter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Limit","","A `BufMut` adapter which limits the amount of bytes that…",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an…",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner…",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the…",null,null],[11,"new","","Creates a new `Chain` sequencing the provided values.",0,[[],["chain",3]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",0,[[]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",0,[[]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",0,[[]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",0,[[]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",0,[[]]],[11,"new","","Creates an iterator over the bytes contained by the buffer.",1,[[],["intoiter",3]]],[11,"into_inner","","Consumes this `IntoIter`, returning the underlying value.",1,[[]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",1,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",1,[[]]],[11,"into_inner","","Consumes this `Limit`, returning the underlying value.",2,[[]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",2,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",2,[[]]],[11,"limit","","Returns the maximum number of bytes that can be written",2,[[]]],[11,"set_limit","","Sets the maximum number of bytes that can be written.",2,[[]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",3,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",3,[[]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",3,[[]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",4,[[]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[]]],[11,"limit","","Returns the maximum number of bytes that can be read.",4,[[]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",4,[[]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",5,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",5,[[]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",5,[[]]],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position…",6,[[]]],[10,"bytes","","Returns a slice starting at the current position and of…",6,[[]]],[11,"bytes_vectored","","Fills `dst` with potentially multiple slices starting at…",6,[[]]],[10,"advance","","Advance the internal cursor of the Buf",6,[[]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",6,[[]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,[[]]],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[]]],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in…",6,[[]]],[11,"get_i16","","Gets a signed 16 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the…",6,[[]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the…",6,[[]]],[11,"get_i32","","Gets a signed 32 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in…",6,[[]]],[11,"get_i64","","Gets a signed 64 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u128","","Gets an unsigned 128 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u128_le","","Gets an unsigned 128 bit integer from `self` in…",6,[[]]],[11,"get_i128","","Gets a signed 128 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i128_le","","Gets a signed 128 bit integer from `self` in little-endian…",6,[[]]],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in big-endian…",6,[[]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in…",6,[[]]],[11,"get_int","","Gets a signed n-byte integer from `self` in big-endian…",6,[[]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian…",6,[[]]],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point…",6,[[]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point…",6,[[]]],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point…",6,[[]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point…",6,[[]]],[11,"to_bytes","","Consumes remaining bytes inside self and returns new…",6,[[],["bytes",3]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",6,[[],["take",3]]],[11,"chain","","Creates an adaptor which will chain this buffer with…",6,[[["buf",8]],[["buf",8],["chain",3]]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for…",6,[[],["reader",3]]],[8,"BufMut","","A trait for values that provide sequential write access to…",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the…",7,[[]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",7,[[]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",7,[[]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut…",7,[[]]],[11,"put","","Transfer bytes into `self` from `src` and advance the…",7,[[["buf",8]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the…",7,[[]]],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[]]],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in big-endian…",7,[[]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in…",7,[[]]],[11,"put_i16","","Writes a signed 16 bit integer to `self` in big-endian…",7,[[]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in big-endian…",7,[[]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in…",7,[[]]],[11,"put_i32","","Writes a signed 32 bit integer to `self` in big-endian…",7,[[]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the…",7,[[]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in…",7,[[]]],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the big-endian…",7,[[]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u128","","Writes an unsigned 128 bit integer to `self` in the…",7,[[]]],[11,"put_u128_le","","Writes an unsigned 128 bit integer to `self` in…",7,[[]]],[11,"put_i128","","Writes a signed 128 bit integer to `self` in the…",7,[[]]],[11,"put_i128_le","","Writes a signed 128 bit integer to `self` in little-endian…",7,[[]]],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in big-endian…",7,[[]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the…",7,[[]]],[11,"put_int","","Writes a signed n-byte integer to `self` in big-endian…",7,[[]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian…",7,[[]]],[11,"put_f32","","Writes an IEEE754 single-precision (4 bytes) floating…",7,[[]]],[11,"put_f32_le","","Writes an IEEE754 single-precision (4 bytes) floating…",7,[[]]],[11,"put_f64","","Writes an IEEE754 double-precision (8 bytes) floating…",7,[[]]],[11,"put_f64_le","","Writes an IEEE754 double-precision (8 bytes) floating…",7,[[]]],[11,"limit","","Creates an adaptor which can write at most `limit` bytes…",7,[[],["limit",3]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for…",7,[[],["writer",3]]],[11,"chain_mut","","Creates an adapter which will chain this buffer with…",7,[[["bufmut",8]],[["chain",3],["bufmut",8]]]],[11,"new","bytes","Creates a new empty `Bytes`.",8,[[],["bytes",3]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",8,[[],["bytes",3]]],[11,"len","","Returns the number of bytes contained in this `Bytes`.",8,[[]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",8,[[]]],[11,"copy_from_slice","","Creates `Bytes` instance from slice, by copying it.",8,[[]]],[11,"slice","","Returns a slice of self for the provided range.",8,[[],["bytes",3]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given…",8,[[],["bytes",3]]],[11,"split_off","","Splits the bytes into two at the given index.",8,[[],["bytes",3]]],[11,"split_to","","Splits the bytes into two at the given index.",8,[[],["bytes",3]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and…",8,[[]]],[11,"clear","","Clears the buffer, removing all data.",8,[[]]],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",9,[[],["bytesmut",3]]],[11,"new","","Creates a new `BytesMut` with default capacity.",9,[[],["bytesmut",3]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",9,[[]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",9,[[]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold…",9,[[]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",9,[[],["bytes",3]]],[11,"split_off","","Splits the bytes into two at the given index.",9,[[],["bytesmut",3]]],[11,"split","","Removes the bytes from the current view, returning them in…",9,[[],["bytesmut",3]]],[11,"split_to","","Splits the buffer into two at the given index.",9,[[],["bytesmut",3]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and…",9,[[]]],[11,"clear","","Clears the buffer, removing all data.",9,[[]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",9,[[]]],[11,"set_len","","Sets the length of the buffer.",9,[[]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to…",9,[[]]],[11,"extend_from_slice","","Appends given bytes to this `BytesMut`.",9,[[]]],[11,"unsplit","","Absorbs a `BytesMut` that was previously split off.",9,[[["bytesmut",3]]]],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position…",6,[[]]],[10,"bytes","","Returns a slice starting at the current position and of…",6,[[]]],[11,"bytes_vectored","bytes::buf","Fills `dst` with potentially multiple slices starting at…",6,[[]]],[10,"advance","bytes","Advance the internal cursor of the Buf",6,[[]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",6,[[]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,[[]]],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[]]],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in…",6,[[]]],[11,"get_i16","","Gets a signed 16 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the…",6,[[]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the…",6,[[]]],[11,"get_i32","","Gets a signed 32 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in…",6,[[]]],[11,"get_i64","","Gets a signed 64 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u128","","Gets an unsigned 128 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u128_le","","Gets an unsigned 128 bit integer from `self` in…",6,[[]]],[11,"get_i128","","Gets a signed 128 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i128_le","","Gets a signed 128 bit integer from `self` in little-endian…",6,[[]]],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in big-endian…",6,[[]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in…",6,[[]]],[11,"get_int","","Gets a signed n-byte integer from `self` in big-endian…",6,[[]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian…",6,[[]]],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point…",6,[[]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point…",6,[[]]],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point…",6,[[]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point…",6,[[]]],[11,"to_bytes","","Consumes remaining bytes inside self and returns new…",6,[[],["bytes",3]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",6,[[],["take",3]]],[11,"chain","","Creates an adaptor which will chain this buffer with…",6,[[["buf",8]],[["buf",8],["chain",3]]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for…",6,[[],["reader",3]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to…",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the…",7,[[]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",7,[[]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",7,[[]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut…",7,[[]]],[11,"put","bytes::buf","Transfer bytes into `self` from `src` and advance the…",7,[[["buf",8]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the…",7,[[]]],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[]]],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in big-endian…",7,[[]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in…",7,[[]]],[11,"put_i16","","Writes a signed 16 bit integer to `self` in big-endian…",7,[[]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in big-endian…",7,[[]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in…",7,[[]]],[11,"put_i32","","Writes a signed 32 bit integer to `self` in big-endian…",7,[[]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the…",7,[[]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in…",7,[[]]],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the big-endian…",7,[[]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u128","","Writes an unsigned 128 bit integer to `self` in the…",7,[[]]],[11,"put_u128_le","","Writes an unsigned 128 bit integer to `self` in…",7,[[]]],[11,"put_i128","","Writes a signed 128 bit integer to `self` in the…",7,[[]]],[11,"put_i128_le","","Writes a signed 128 bit integer to `self` in little-endian…",7,[[]]],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in big-endian…",7,[[]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the…",7,[[]]],[11,"put_int","","Writes a signed n-byte integer to `self` in big-endian…",7,[[]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian…",7,[[]]],[11,"put_f32","","Writes an IEEE754 single-precision (4 bytes) floating…",7,[[]]],[11,"put_f32_le","","Writes an IEEE754 single-precision (4 bytes) floating…",7,[[]]],[11,"put_f64","","Writes an IEEE754 double-precision (8 bytes) floating…",7,[[]]],[11,"put_f64_le","","Writes an IEEE754 double-precision (8 bytes) floating…",7,[[]]],[11,"limit","","Creates an adaptor which can write at most `limit` bytes…",7,[[],["limit",3]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for…",7,[[],["writer",3]]],[11,"chain_mut","","Creates an adapter which will chain this buffer with…",7,[[["bufmut",8]],[["chain",3],["bufmut",8]]]],[11,"from","bytes","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","bytes::buf","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"remaining","","",0,[[]]],[11,"bytes","","",0,[[]]],[11,"advance","","",0,[[]]],[11,"bytes_vectored","","",0,[[]]],[11,"remaining","","",4,[[]]],[11,"bytes","","",4,[[]]],[11,"advance","","",4,[[]]],[11,"remaining","bytes","",8,[[]]],[11,"bytes","","",8,[[]]],[11,"advance","","",8,[[]]],[11,"to_bytes","","",8,[[],["bytes",3]]],[11,"remaining","","",9,[[]]],[11,"bytes","","",9,[[]]],[11,"advance","","",9,[[]]],[11,"to_bytes","","",9,[[],["bytes",3]]],[11,"remaining_mut","bytes::buf","",0,[[]]],[11,"bytes_mut","","",0,[[]]],[11,"advance_mut","","",0,[[]]],[11,"remaining_mut","","",2,[[]]],[11,"bytes_mut","","",2,[[]]],[11,"advance_mut","","",2,[[]]],[11,"remaining_mut","bytes","",9,[[]]],[11,"advance_mut","","",9,[[]]],[11,"bytes_mut","","",9,[[]]],[11,"put","","",9,[[["buf",8]]]],[11,"put_slice","","",9,[[]]],[11,"deref","","",8,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"from","","",8,[[],["bytes",3]]],[11,"from","","",8,[[],["bytes",3]]],[11,"from","","",8,[[["vec",3]],["bytes",3]]],[11,"from","","",8,[[["string",3]],["bytes",3]]],[11,"from","","",9,[[],["bytesmut",3]]],[11,"from","","",9,[[],["bytesmut",3]]],[11,"from","","",8,[[["bytesmut",3]],["bytes",3]]],[11,"fmt","bytes::buf","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","bytes","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"eq","","",8,[[["bytes",3]]]],[11,"eq","","",8,[[]]],[11,"eq","","",8,[[]]],[11,"eq","","",8,[[["vec",3]]]],[11,"eq","","",8,[[["string",3]]]],[11,"eq","","",8,[[]]],[11,"eq","","",9,[[["bytesmut",3]]]],[11,"eq","","",9,[[]]],[11,"eq","","",9,[[]]],[11,"eq","","",9,[[["vec",3]]]],[11,"eq","","",9,[[["string",3]]]],[11,"eq","","",9,[[]]],[11,"eq","","",8,[[["bytesmut",3]]]],[11,"eq","","",9,[[["bytes",3]]]],[11,"cmp","","",8,[[["bytes",3]],["ordering",4]]],[11,"cmp","","",9,[[["bytesmut",3]],["ordering",4]]],[11,"partial_cmp","","",8,[[["bytes",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",8,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",8,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",8,[[["vec",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",8,[[["string",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",8,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[["bytesmut",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[["vec",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[["string",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[],[["option",4],["ordering",4]]]],[11,"drop","","",8,[[]]],[11,"drop","","",9,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"next","bytes::buf","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"extend","bytes","",9,[[]]],[11,"extend","","",9,[[]]],[11,"from_iter","","",8,[[["intoiterator",8]]]],[11,"from_iter","","",9,[[["intoiterator",8]]]],[11,"from_iter","","",9,[[["intoiterator",8]]]],[11,"into_iter","bytes::buf","",0,[[]]],[11,"into_iter","bytes","",8,[[]]],[11,"into_iter","","",9,[[]]],[11,"write_str","","",9,[[],["result",6]]],[11,"write_fmt","","",9,[[["arguments",3]],["result",6]]],[11,"as_ref","","",8,[[]]],[11,"as_ref","","",9,[[]]],[11,"as_mut","","",9,[[]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"clone","","",8,[[],["bytes",3]]],[11,"clone","","",9,[[],["bytesmut",3]]],[11,"default","","",8,[[],["bytes",3]]],[11,"default","","",9,[[],["bytesmut",3]]],[11,"borrow","","",8,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"fill_buf","bytes::buf","",3,[[],["result",6]]],[11,"consume","","",3,[[]]],[11,"read","","",3,[[],["result",6]]],[11,"write","","",5,[[],["result",6]]],[11,"flush","","",5,[[],["result",6]]],[11,"serialize","bytes","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"deserialize","","",8,[[],[["result",4],["bytes",3]]]],[11,"deserialize","","",9,[[],[["bytesmut",3],["result",4]]]],[11,"bytes_vectored","bytes::buf","Fills `dst` with potentially multiple slices starting at…",6,[[]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",6,[[]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",6,[[]]],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",6,[[]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",6,[[]]],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in…",6,[[]]],[11,"get_i16","","Gets a signed 16 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the…",6,[[]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the…",6,[[]]],[11,"get_i32","","Gets a signed 32 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in…",6,[[]]],[11,"get_i64","","Gets a signed 64 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian…",6,[[]]],[11,"get_u128","","Gets an unsigned 128 bit integer from `self` in big-endian…",6,[[]]],[11,"get_u128_le","","Gets an unsigned 128 bit integer from `self` in…",6,[[]]],[11,"get_i128","","Gets a signed 128 bit integer from `self` in big-endian…",6,[[]]],[11,"get_i128_le","","Gets a signed 128 bit integer from `self` in little-endian…",6,[[]]],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in big-endian…",6,[[]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in…",6,[[]]],[11,"get_int","","Gets a signed n-byte integer from `self` in big-endian…",6,[[]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian…",6,[[]]],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point…",6,[[]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point…",6,[[]]],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point…",6,[[]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point…",6,[[]]],[11,"to_bytes","","Consumes remaining bytes inside self and returns new…",6,[[],["bytes",3]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",6,[[],["take",3]]],[11,"chain","","Creates an adaptor which will chain this buffer with…",6,[[["buf",8]],[["buf",8],["chain",3]]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for…",6,[[],["reader",3]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",7,[[]]],[11,"put","","Transfer bytes into `self` from `src` and advance the…",7,[[["buf",8]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the…",7,[[]]],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",7,[[]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",7,[[]]],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in big-endian…",7,[[]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in…",7,[[]]],[11,"put_i16","","Writes a signed 16 bit integer to `self` in big-endian…",7,[[]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in big-endian…",7,[[]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in…",7,[[]]],[11,"put_i32","","Writes a signed 32 bit integer to `self` in big-endian…",7,[[]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the…",7,[[]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in…",7,[[]]],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the big-endian…",7,[[]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian…",7,[[]]],[11,"put_u128","","Writes an unsigned 128 bit integer to `self` in the…",7,[[]]],[11,"put_u128_le","","Writes an unsigned 128 bit integer to `self` in…",7,[[]]],[11,"put_i128","","Writes a signed 128 bit integer to `self` in the…",7,[[]]],[11,"put_i128_le","","Writes a signed 128 bit integer to `self` in little-endian…",7,[[]]],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in big-endian…",7,[[]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the…",7,[[]]],[11,"put_int","","Writes a signed n-byte integer to `self` in big-endian…",7,[[]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian…",7,[[]]],[11,"put_f32","","Writes an IEEE754 single-precision (4 bytes) floating…",7,[[]]],[11,"put_f32_le","","Writes an IEEE754 single-precision (4 bytes) floating…",7,[[]]],[11,"put_f64","","Writes an IEEE754 double-precision (8 bytes) floating…",7,[[]]],[11,"put_f64_le","","Writes an IEEE754 double-precision (8 bytes) floating…",7,[[]]],[11,"limit","","Creates an adaptor which can write at most `limit` bytes…",7,[[],["limit",3]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for…",7,[[],["writer",3]]],[11,"chain_mut","","Creates an adapter which will chain this buffer with…",7,[[["bufmut",8]],[["chain",3],["bufmut",8]]]]],"p":[[3,"Chain"],[3,"IntoIter"],[3,"Limit"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[3,"Bytes"],[3,"BytesMut"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);